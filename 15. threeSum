//执行用时 :160 ms, 在所有 c 提交中击败了86.02%的用户
//内存消耗 :22.1 MB, 在所有 c 提交中击败了97.86%的用户
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int cmpfunc (const void * a, const void * b)
{
   return ( *(int*)a - *(int*)b );
}

int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){
    *returnSize = 0;
    if(numsSize == 0){
        return 0;
    }
    qsort(nums,numsSize, sizeof(int), cmpfunc);
    int left = 0;
    int p    = 1;
    int q    = numsSize - 1;
    int tmp[3] = {0};
    int **ret = (int **)malloc(sizeof(int *) * (numsSize + 1) * 6);
    *returnColumnSizes = malloc(sizeof(int) * (numsSize + 1) * 6);
    int sum = 0;
    while(nums[left] <= 0 && left <= numsSize - 2){
        while(p <= q-1){
            sum = nums[left] + nums[p] + nums[q];
            if(sum == 0){
                ret[*returnSize] = malloc(sizeof(int) * 3);
                ret[*returnSize][0] = nums[left];
                ret[*returnSize][1] = nums[p];
                ret[*returnSize][2] = nums[q];
                (*returnColumnSizes)[*returnSize] = 3;
                (*returnSize)++;  
                while(nums[p] == nums[++p] && p <= q-1){}
            }
            else if(sum < 0){
                p++;
                // printf("left=%d p=%d q=%d\n",left,p,q);
            }
            else if(sum > 0){
                q--;
                // printf("left=%d p=%d q=%d\n",left,p,q);
            }
        }
        while(nums[left] == nums[++left] && left + 1 < q){
        }
        p = left + 1;
        q = numsSize - 1;
    }
    return ret;
}
