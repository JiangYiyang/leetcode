    // nums[9]  = 1   ;//I , 73     , 1001     ,
    // nums[6]  = 5   ;//V , 86     , 0110     ,
    // nums[8]  = 10  ;//X , 88     , 1000     ,
    // nums[12] = 50  ;//L , 76     , 1100     ,
    // nums[3]  = 100 ;//C , 67     , 0011     ,
    // nums[4]  = 500 ;//D , 68     , 0100     ,
    // nums[13] = 1000;//M , 77     , 1101     ,
     
int num2char(int x){
    switch(x){
        case 0 : return 77;
        case 1 : return 68;
        case 2 : return 67;
        case 3 : return 76;
        case 4 : return 88;
        case 5 : return 86;
        case 6 : return 73;
    }
    return 0;
}

char * intToRoman(int num){
    char s[100] = {0};
    char *p = s;
    int c_num[7] = {0};
    while(num != 0){
        if(num >= 1000){
            c_num[0]++;
            num -= 1000;
        }
        else if(num >= 500){
            c_num[1]++;
            num -= 500;
        }
        else if(num >= 100){
            c_num[2]++;
            num -= 100;
        }
        else if(num >= 50){
            c_num[3]++;
            num -= 50;
        }
        else if(num >= 10){
            c_num[4]++;
            num -= 10;
        }
        else if(num >= 5){
            c_num[5]++;
            num -= 5;
        }
        else if(num >= 1){
            c_num[6]++;
            num -= 1;
        }

    }

    // for(int i = 0; i < 7; i++){
    //     printf("%d",c_num[i]); 
    // }
        // printf("\n");
    // 应根据量级来进行循环，分千 0 ，百 1 2 ，十 3 4 ，个 5 6 
    // 先判断千
    
    char tmp[6] = {0};

    if(c_num[0] > 0){
        int j = 0;
        while(j < c_num[0]){
            tmp[j] = 77;
            j++;
        }
        // printf("%s\n",tmp);
        strcat(s,tmp);
    }

    // 之后是百十个
    for(int i = 1; i < 7; i = i + 2){
        // printf("%d\n",i);
        switch(c_num[i]){
            case 0: if(c_num[i+1]<=3 && c_num[i+1] > 0){
                for(int j = 0; j < c_num[i+1]; j++){
                    tmp[j] = num2char(i+1);
                }
                tmp[c_num[i+1]] = 0;
                // printf("%s\n",tmp);
                strcat(s,tmp);
                }
                else if(c_num[i+1] == 4){
                    tmp[0] = num2char(i+1);
                    tmp[1] = num2char(i);
                    tmp[2] = 0;
                    // printf("%s\n",tmp);
                    strcat(s,tmp);
                }
                break;

            case 1: if(c_num[i+1]<=3){
                tmp[0] = num2char(i);
                int j = 1;
                while(j < c_num[i+1]+1){
                    tmp[j] = num2char(i+1);
                    j++;
                }
                tmp[c_num[i+1]+1] = 0;
                // printf("%s\n",tmp);
                strcat(s,tmp);
                }
                else if(c_num[i+1] == 4){
                    char tmp[10];
                    tmp[0] = num2char(i+1);
                    tmp[1] = num2char(i-1);
                    tmp[2] = 0;
                    // printf("%s\n",tmp);
                    strcat(s,tmp);
                }
        }
    }
    return p;
}
