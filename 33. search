//执行用时 :0 ms, 在所有 c 提交中击败了100.00%的用户
//内存消耗 :7.2 MB, 在所有 c 提交中击败了67.76%的用户
int search(int* nums, int numsSize, int target){
    // 注意空集
    if(numsSize == 0){
        return -1;
    }
    // 思路：如果要O(logn)级别，则需要一次排除一半，应为他特征为至少一半是有序
    // 则如果nums[左]小于nums[中间]，则左有序右无序，如果在有序范围，则直接找到，不在则迭代
    int flag_half = numsSize / 2 ;
    int left = 0, right = numsSize - 1;
    while(1){
        // printf("left = %d flag_half = %d right = %d \n",left,flag_half,right);
        // 如果左边是顺序
        if(nums[left] < nums[flag_half]){
            if(target <= nums[flag_half] && target >= nums[left]){
                // 注意，这里顺序值也不是连续的
                right = flag_half;
                flag_half = left + (flag_half -left)/2;
            }
            else{
                left = flag_half;
                flag_half = right - (flag_half -left)/2;
            }
        }
        else{
             if(target <= nums[right] && target >= nums[flag_half]){
                left = flag_half;
                flag_half = right - (flag_half -left)/2;
            }
            else{
                right = flag_half;
                flag_half = left + (flag_half -left)/2;
            }
        }
        // printf("left = %d flag_half = %d right = %d \n",left,flag_half,right);
        if((flag_half == left + 1 || flag_half == left) && (flag_half == right - 1 || flag_half == right)){
            if(target == nums[left]){return left;}
            if(target == nums[right]){return right;}
            if(target == nums[flag_half]){return flag_half;}
            return -1;
        }
    }
    return 0;
}
