执行用时 :4 ms, 在所有 c 提交中击败了100.00%的用户
内存消耗 :7.1 MB, 在所有 c 提交中击败了75.89%的用户

int cmpfunc (const void * a, const void * b)
{
   return ( *(int*)a - *(int*)b );
}

int threeSumClosest(int* nums, int numsSize, int target){
    if(numsSize == 0){
        return 0;
    }
    if(numsSize == 3){
        return nums[0] + nums[1] + nums[2];
    }
    qsort(nums,numsSize, sizeof(int), cmpfunc);
    
    // for(int i = 0; i < numsSize; i++){
    //     printf("%d ",nums[i]); 
    // }
    int left = 0;
    int p    = 1;
    int q    = numsSize - 1;
    int sum = 0;
    int st_diff = abs(nums[0] + nums[1] + nums[2] - target);
    int res = nums[0] + nums[1] + nums[2];
    
    // printf("st_diff=%d sum=%d res = %d\n",st_diff,sum,res);
    while(left <= numsSize - 2){
       
        while(p <= q-1){ 
            // printf("left=%d p=%d q=%d\n",left,p,q);
            sum = nums[left] + nums[p] + nums[q];
            // printf("sum=%d nums[left]=%d nums[p]=%d nums[q]=%d\n",sum,nums[left],nums[p],nums[q]);
            if(sum == target){
                return target;
            }
            else if(sum < target){
                p++;
                if((target-sum) < st_diff){
                    st_diff = target-sum;
                    res = sum;
                }
                // printf("st_diff=%d sum=%d res = %d\n",st_diff,sum,res);
            }
            else if(sum > target){
                q--;
                if((sum-target) < st_diff){
                    st_diff = sum-target;
                    res = sum;
                }
                // printf("st_diff=%d sum=%d res = %d\n",st_diff,sum,res);
            }
        }
        while(nums[left] == nums[++left] && left + 1 < q){
        }
        p = left + 1;
        q = numsSize - 1;
    }
    return res;
}

    
